//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace win.ResourceService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ResourceService.IResource")]
    public interface IResource {
        
        // CODEGEN: 操作 Upload 以后生成的消息协定不是 RPC，也不是换行文档。
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResource/Upload", ReplyAction="http://tempuri.org/IResource/UploadResponse")]
        win.ResourceService.UploadResponse Upload(win.ResourceService.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResource/Upload", ReplyAction="http://tempuri.org/IResource/UploadResponse")]
        System.Threading.Tasks.Task<win.ResourceService.UploadResponse> UploadAsync(win.ResourceService.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResource/Download", ReplyAction="http://tempuri.org/IResource/DownloadResponse")]
        System.IO.Stream Download(int resourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResource/Download", ReplyAction="http://tempuri.org/IResource/DownloadResponse")]
        System.Threading.Tasks.Task<System.IO.Stream> DownloadAsync(int resourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResource/getFileName", ReplyAction="http://tempuri.org/IResource/getFileNameResponse")]
        string getFileName(int resourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResource/getFileName", ReplyAction="http://tempuri.org/IResource/getFileNameResponse")]
        System.Threading.Tasks.Task<string> getFileNameAsync(int resourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResource/deleteFile", ReplyAction="http://tempuri.org/IResource/deleteFileResponse")]
        bool deleteFile(int resourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IResource/deleteFile", ReplyAction="http://tempuri.org/IResource/deleteFileResponse")]
        System.Threading.Tasks.Task<bool> deleteFileAsync(int resourceID);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string projectID;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string resourceName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int uploadPerson;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream data;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(string projectID, string resourceName, int uploadPerson, System.IO.Stream data) {
            this.projectID = projectID;
            this.resourceName = resourceName;
            this.uploadPerson = uploadPerson;
            this.data = data;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class UploadResponse {
        
        public UploadResponse() {
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IResourceChannel : win.ResourceService.IResource, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResourceClient : System.ServiceModel.ClientBase<win.ResourceService.IResource>, win.ResourceService.IResource {
        
        public ResourceClient() {
        }
        
        public ResourceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ResourceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ResourceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        win.ResourceService.UploadResponse win.ResourceService.IResource.Upload(win.ResourceService.FileUploadMessage request) {
            return base.Channel.Upload(request);
        }
        
        public void Upload(string projectID, string resourceName, int uploadPerson, System.IO.Stream data) {
            win.ResourceService.FileUploadMessage inValue = new win.ResourceService.FileUploadMessage();
            inValue.projectID = projectID;
            inValue.resourceName = resourceName;
            inValue.uploadPerson = uploadPerson;
            inValue.data = data;
            win.ResourceService.UploadResponse retVal = ((win.ResourceService.IResource)(this)).Upload(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<win.ResourceService.UploadResponse> win.ResourceService.IResource.UploadAsync(win.ResourceService.FileUploadMessage request) {
            return base.Channel.UploadAsync(request);
        }
        
        public System.Threading.Tasks.Task<win.ResourceService.UploadResponse> UploadAsync(string projectID, string resourceName, int uploadPerson, System.IO.Stream data) {
            win.ResourceService.FileUploadMessage inValue = new win.ResourceService.FileUploadMessage();
            inValue.projectID = projectID;
            inValue.resourceName = resourceName;
            inValue.uploadPerson = uploadPerson;
            inValue.data = data;
            return ((win.ResourceService.IResource)(this)).UploadAsync(inValue);
        }
        
        public System.IO.Stream Download(int resourceID) {
            return base.Channel.Download(resourceID);
        }
        
        public System.Threading.Tasks.Task<System.IO.Stream> DownloadAsync(int resourceID) {
            return base.Channel.DownloadAsync(resourceID);
        }
        
        public string getFileName(int resourceID) {
            return base.Channel.getFileName(resourceID);
        }
        
        public System.Threading.Tasks.Task<string> getFileNameAsync(int resourceID) {
            return base.Channel.getFileNameAsync(resourceID);
        }
        
        public bool deleteFile(int resourceID) {
            return base.Channel.deleteFile(resourceID);
        }
        
        public System.Threading.Tasks.Task<bool> deleteFileAsync(int resourceID) {
            return base.Channel.deleteFileAsync(resourceID);
        }
    }
}
