//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JingMeiEntities : DbContext
    {
        public JingMeiEntities()
            : base("name=JingMeiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<checkPerson> checkPerson { get; set; }
        public virtual DbSet<checkResult> checkResult { get; set; }
        public virtual DbSet<customer> customer { get; set; }
        public virtual DbSet<department> department { get; set; }
        public virtual DbSet<project> project { get; set; }
        public virtual DbSet<projectStatus> projectStatus { get; set; }
        public virtual DbSet<user> user { get; set; }
        public virtual DbSet<DefinitionIdentityTable> DefinitionIdentityTable { get; set; }
        public virtual DbSet<IdentityOwnerTable> IdentityOwnerTable { get; set; }
        public virtual DbSet<InstanceMetadataChangesTable> InstanceMetadataChangesTable { get; set; }
        public virtual DbSet<InstancePromotedPropertiesTable> InstancePromotedPropertiesTable { get; set; }
        public virtual DbSet<InstancesTable> InstancesTable { get; set; }
        public virtual DbSet<KeysTable> KeysTable { get; set; }
        public virtual DbSet<LockOwnersTable> LockOwnersTable { get; set; }
        public virtual DbSet<RunnableInstancesTable> RunnableInstancesTable { get; set; }
        public virtual DbSet<ServiceDeploymentsTable> ServiceDeploymentsTable { get; set; }
        public virtual DbSet<SqlWorkflowInstanceStoreVersionTable> SqlWorkflowInstanceStoreVersionTable { get; set; }
        public virtual DbSet<InstancePromotedProperties> InstancePromotedProperties { get; set; }
        public virtual DbSet<Instances> Instances { get; set; }
        public virtual DbSet<ServiceDeployments> ServiceDeployments { get; set; }
        public virtual DbSet<zz_ext_resoutceInfo> zz_ext_resoutceInfo { get; set; }
        public virtual DbSet<checkPermission> checkPermission { get; set; }
        public virtual DbSet<projectInfo> projectInfo { get; set; }
        public virtual DbSet<permission> permission { get; set; }
        public virtual DbSet<resourcePath> resourcePath { get; set; }
        public virtual DbSet<zz_ext_resoutceNotes> zz_ext_resoutceNotes { get; set; }
        public virtual DbSet<projectIDTemp> projectIDTemps { get; set; }
        public virtual DbSet<projectShowInfo> projectShowInfoes { get; set; }
        public virtual DbSet<notice> notices { get; set; }
        public virtual DbSet<maxStatuChange> maxStatuChanges { get; set; }
        public virtual DbSet<projectStatuChangeInfo> projectStatuChangeInfoes { get; set; }
        public virtual DbSet<productInfo> productInfoes { get; set; }
    
        public virtual ObjectResult<AssociateKeys_Result> AssociateKeys(Nullable<long> surrogateInstanceId, string keysToAssociate, byte[] concatenatedKeyProperties, Nullable<byte> encodingOption, Nullable<System.Guid> singleKeyId)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            var keysToAssociateParameter = keysToAssociate != null ?
                new ObjectParameter("keysToAssociate", keysToAssociate) :
                new ObjectParameter("keysToAssociate", typeof(string));
    
            var concatenatedKeyPropertiesParameter = concatenatedKeyProperties != null ?
                new ObjectParameter("concatenatedKeyProperties", concatenatedKeyProperties) :
                new ObjectParameter("concatenatedKeyProperties", typeof(byte[]));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var singleKeyIdParameter = singleKeyId.HasValue ?
                new ObjectParameter("singleKeyId", singleKeyId) :
                new ObjectParameter("singleKeyId", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AssociateKeys_Result>("AssociateKeys", surrogateInstanceIdParameter, keysToAssociateParameter, concatenatedKeyPropertiesParameter, encodingOptionParameter, singleKeyIdParameter);
        }
    
        public virtual ObjectResult<CompleteKeys_Result> CompleteKeys(Nullable<long> surrogateInstanceId, string keysToComplete)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            var keysToCompleteParameter = keysToComplete != null ?
                new ObjectParameter("keysToComplete", keysToComplete) :
                new ObjectParameter("keysToComplete", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompleteKeys_Result>("CompleteKeys", surrogateInstanceIdParameter, keysToCompleteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateInstance(Nullable<System.Guid> instanceId, Nullable<long> surrogateLockOwnerId, Nullable<System.Guid> workflowHostType, Nullable<long> serviceDeploymentId, ObjectParameter surrogateInstanceId, ObjectParameter result)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var serviceDeploymentIdParameter = serviceDeploymentId.HasValue ?
                new ObjectParameter("serviceDeploymentId", serviceDeploymentId) :
                new ObjectParameter("serviceDeploymentId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateInstance", instanceIdParameter, surrogateLockOwnerIdParameter, workflowHostTypeParameter, serviceDeploymentIdParameter, surrogateInstanceId, result);
        }
    
        public virtual ObjectResult<Nullable<int>> CreateLockOwner(Nullable<System.Guid> lockOwnerId, Nullable<int> lockTimeout, Nullable<System.Guid> workflowHostType, Nullable<bool> enqueueCommand, Nullable<bool> deleteInstanceOnCompletion, byte[] primitiveLockOwnerData, byte[] complexLockOwnerData, byte[] writeOnlyPrimitiveLockOwnerData, byte[] writeOnlyComplexLockOwnerData, Nullable<byte> encodingOption, string machineName, string identityMetadata)
        {
            var lockOwnerIdParameter = lockOwnerId.HasValue ?
                new ObjectParameter("lockOwnerId", lockOwnerId) :
                new ObjectParameter("lockOwnerId", typeof(System.Guid));
    
            var lockTimeoutParameter = lockTimeout.HasValue ?
                new ObjectParameter("lockTimeout", lockTimeout) :
                new ObjectParameter("lockTimeout", typeof(int));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var enqueueCommandParameter = enqueueCommand.HasValue ?
                new ObjectParameter("enqueueCommand", enqueueCommand) :
                new ObjectParameter("enqueueCommand", typeof(bool));
    
            var deleteInstanceOnCompletionParameter = deleteInstanceOnCompletion.HasValue ?
                new ObjectParameter("deleteInstanceOnCompletion", deleteInstanceOnCompletion) :
                new ObjectParameter("deleteInstanceOnCompletion", typeof(bool));
    
            var primitiveLockOwnerDataParameter = primitiveLockOwnerData != null ?
                new ObjectParameter("primitiveLockOwnerData", primitiveLockOwnerData) :
                new ObjectParameter("primitiveLockOwnerData", typeof(byte[]));
    
            var complexLockOwnerDataParameter = complexLockOwnerData != null ?
                new ObjectParameter("complexLockOwnerData", complexLockOwnerData) :
                new ObjectParameter("complexLockOwnerData", typeof(byte[]));
    
            var writeOnlyPrimitiveLockOwnerDataParameter = writeOnlyPrimitiveLockOwnerData != null ?
                new ObjectParameter("writeOnlyPrimitiveLockOwnerData", writeOnlyPrimitiveLockOwnerData) :
                new ObjectParameter("writeOnlyPrimitiveLockOwnerData", typeof(byte[]));
    
            var writeOnlyComplexLockOwnerDataParameter = writeOnlyComplexLockOwnerData != null ?
                new ObjectParameter("writeOnlyComplexLockOwnerData", writeOnlyComplexLockOwnerData) :
                new ObjectParameter("writeOnlyComplexLockOwnerData", typeof(byte[]));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("machineName", machineName) :
                new ObjectParameter("machineName", typeof(string));
    
            var identityMetadataParameter = identityMetadata != null ?
                new ObjectParameter("identityMetadata", identityMetadata) :
                new ObjectParameter("identityMetadata", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CreateLockOwner", lockOwnerIdParameter, lockTimeoutParameter, workflowHostTypeParameter, enqueueCommandParameter, deleteInstanceOnCompletionParameter, primitiveLockOwnerDataParameter, complexLockOwnerDataParameter, writeOnlyPrimitiveLockOwnerDataParameter, writeOnlyComplexLockOwnerDataParameter, encodingOptionParameter, machineNameParameter, identityMetadataParameter);
        }
    
        public virtual ObjectResult<CreateServiceDeployment_Result> CreateServiceDeployment(Nullable<System.Guid> serviceDeploymentHash, string siteName, string relativeServicePath, string relativeApplicationPath, string serviceName, string serviceNamespace, ObjectParameter serviceDeploymentId)
        {
            var serviceDeploymentHashParameter = serviceDeploymentHash.HasValue ?
                new ObjectParameter("serviceDeploymentHash", serviceDeploymentHash) :
                new ObjectParameter("serviceDeploymentHash", typeof(System.Guid));
    
            var siteNameParameter = siteName != null ?
                new ObjectParameter("siteName", siteName) :
                new ObjectParameter("siteName", typeof(string));
    
            var relativeServicePathParameter = relativeServicePath != null ?
                new ObjectParameter("relativeServicePath", relativeServicePath) :
                new ObjectParameter("relativeServicePath", typeof(string));
    
            var relativeApplicationPathParameter = relativeApplicationPath != null ?
                new ObjectParameter("relativeApplicationPath", relativeApplicationPath) :
                new ObjectParameter("relativeApplicationPath", typeof(string));
    
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("serviceName", serviceName) :
                new ObjectParameter("serviceName", typeof(string));
    
            var serviceNamespaceParameter = serviceNamespace != null ?
                new ObjectParameter("serviceNamespace", serviceNamespace) :
                new ObjectParameter("serviceNamespace", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CreateServiceDeployment_Result>("CreateServiceDeployment", serviceDeploymentHashParameter, siteNameParameter, relativeServicePathParameter, relativeApplicationPathParameter, serviceNameParameter, serviceNamespaceParameter, serviceDeploymentId);
        }
    
        public virtual int DeleteInstance(Nullable<long> surrogateInstanceId)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInstance", surrogateInstanceIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeleteLockOwner(Nullable<long> surrogateLockOwnerId)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeleteLockOwner", surrogateLockOwnerIdParameter);
        }
    
        public virtual ObjectResult<DetectRunnableInstances_Result> DetectRunnableInstances(Nullable<System.Guid> workflowHostType, Nullable<long> surrogateLockOwnerId)
        {
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DetectRunnableInstances_Result>("DetectRunnableInstances", workflowHostTypeParameter, surrogateLockOwnerIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> ExtendLock(Nullable<long> surrogateLockOwnerId, Nullable<int> lockTimeout)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var lockTimeoutParameter = lockTimeout.HasValue ?
                new ObjectParameter("lockTimeout", lockTimeout) :
                new ObjectParameter("lockTimeout", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ExtendLock", surrogateLockOwnerIdParameter, lockTimeoutParameter);
        }
    
        public virtual ObjectResult<FreeKeys_Result> FreeKeys(Nullable<long> surrogateInstanceId, string keysToFree)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            var keysToFreeParameter = keysToFree != null ?
                new ObjectParameter("keysToFree", keysToFree) :
                new ObjectParameter("keysToFree", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FreeKeys_Result>("FreeKeys", surrogateInstanceIdParameter, keysToFreeParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetActivatableWorkflowsActivationParameters(string machineName)
        {
            var machineNameParameter = machineName != null ?
                new ObjectParameter("machineName", machineName) :
                new ObjectParameter("machineName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetActivatableWorkflowsActivationParameters", machineNameParameter);
        }
    
        public virtual ObjectResult<GetWorkflowInstanceStoreVersion_Result> GetWorkflowInstanceStoreVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkflowInstanceStoreVersion_Result>("GetWorkflowInstanceStoreVersion");
        }
    
        public virtual int InsertDefinitionIdentity(string identityMetadata)
        {
            var identityMetadataParameter = identityMetadata != null ?
                new ObjectParameter("identityMetadata", identityMetadata) :
                new ObjectParameter("identityMetadata", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertDefinitionIdentity", identityMetadataParameter);
        }
    
        public virtual int InsertPromotedProperties(Nullable<System.Guid> instanceId, string promotionName, byte[] value33, byte[] value34, byte[] value35, byte[] value36, byte[] value37, byte[] value38, byte[] value39, byte[] value40, byte[] value41, byte[] value42, byte[] value43, byte[] value44, byte[] value45, byte[] value46, byte[] value47, byte[] value48, byte[] value49, byte[] value50, byte[] value51, byte[] value52, byte[] value53, byte[] value54, byte[] value55, byte[] value56, byte[] value57, byte[] value58, byte[] value59, byte[] value60, byte[] value61, byte[] value62, byte[] value63, byte[] value64)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var promotionNameParameter = promotionName != null ?
                new ObjectParameter("promotionName", promotionName) :
                new ObjectParameter("promotionName", typeof(string));
    
            var value33Parameter = value33 != null ?
                new ObjectParameter("value33", value33) :
                new ObjectParameter("value33", typeof(byte[]));
    
            var value34Parameter = value34 != null ?
                new ObjectParameter("value34", value34) :
                new ObjectParameter("value34", typeof(byte[]));
    
            var value35Parameter = value35 != null ?
                new ObjectParameter("value35", value35) :
                new ObjectParameter("value35", typeof(byte[]));
    
            var value36Parameter = value36 != null ?
                new ObjectParameter("value36", value36) :
                new ObjectParameter("value36", typeof(byte[]));
    
            var value37Parameter = value37 != null ?
                new ObjectParameter("value37", value37) :
                new ObjectParameter("value37", typeof(byte[]));
    
            var value38Parameter = value38 != null ?
                new ObjectParameter("value38", value38) :
                new ObjectParameter("value38", typeof(byte[]));
    
            var value39Parameter = value39 != null ?
                new ObjectParameter("value39", value39) :
                new ObjectParameter("value39", typeof(byte[]));
    
            var value40Parameter = value40 != null ?
                new ObjectParameter("value40", value40) :
                new ObjectParameter("value40", typeof(byte[]));
    
            var value41Parameter = value41 != null ?
                new ObjectParameter("value41", value41) :
                new ObjectParameter("value41", typeof(byte[]));
    
            var value42Parameter = value42 != null ?
                new ObjectParameter("value42", value42) :
                new ObjectParameter("value42", typeof(byte[]));
    
            var value43Parameter = value43 != null ?
                new ObjectParameter("value43", value43) :
                new ObjectParameter("value43", typeof(byte[]));
    
            var value44Parameter = value44 != null ?
                new ObjectParameter("value44", value44) :
                new ObjectParameter("value44", typeof(byte[]));
    
            var value45Parameter = value45 != null ?
                new ObjectParameter("value45", value45) :
                new ObjectParameter("value45", typeof(byte[]));
    
            var value46Parameter = value46 != null ?
                new ObjectParameter("value46", value46) :
                new ObjectParameter("value46", typeof(byte[]));
    
            var value47Parameter = value47 != null ?
                new ObjectParameter("value47", value47) :
                new ObjectParameter("value47", typeof(byte[]));
    
            var value48Parameter = value48 != null ?
                new ObjectParameter("value48", value48) :
                new ObjectParameter("value48", typeof(byte[]));
    
            var value49Parameter = value49 != null ?
                new ObjectParameter("value49", value49) :
                new ObjectParameter("value49", typeof(byte[]));
    
            var value50Parameter = value50 != null ?
                new ObjectParameter("value50", value50) :
                new ObjectParameter("value50", typeof(byte[]));
    
            var value51Parameter = value51 != null ?
                new ObjectParameter("value51", value51) :
                new ObjectParameter("value51", typeof(byte[]));
    
            var value52Parameter = value52 != null ?
                new ObjectParameter("value52", value52) :
                new ObjectParameter("value52", typeof(byte[]));
    
            var value53Parameter = value53 != null ?
                new ObjectParameter("value53", value53) :
                new ObjectParameter("value53", typeof(byte[]));
    
            var value54Parameter = value54 != null ?
                new ObjectParameter("value54", value54) :
                new ObjectParameter("value54", typeof(byte[]));
    
            var value55Parameter = value55 != null ?
                new ObjectParameter("value55", value55) :
                new ObjectParameter("value55", typeof(byte[]));
    
            var value56Parameter = value56 != null ?
                new ObjectParameter("value56", value56) :
                new ObjectParameter("value56", typeof(byte[]));
    
            var value57Parameter = value57 != null ?
                new ObjectParameter("value57", value57) :
                new ObjectParameter("value57", typeof(byte[]));
    
            var value58Parameter = value58 != null ?
                new ObjectParameter("value58", value58) :
                new ObjectParameter("value58", typeof(byte[]));
    
            var value59Parameter = value59 != null ?
                new ObjectParameter("value59", value59) :
                new ObjectParameter("value59", typeof(byte[]));
    
            var value60Parameter = value60 != null ?
                new ObjectParameter("value60", value60) :
                new ObjectParameter("value60", typeof(byte[]));
    
            var value61Parameter = value61 != null ?
                new ObjectParameter("value61", value61) :
                new ObjectParameter("value61", typeof(byte[]));
    
            var value62Parameter = value62 != null ?
                new ObjectParameter("value62", value62) :
                new ObjectParameter("value62", typeof(byte[]));
    
            var value63Parameter = value63 != null ?
                new ObjectParameter("value63", value63) :
                new ObjectParameter("value63", typeof(byte[]));
    
            var value64Parameter = value64 != null ?
                new ObjectParameter("value64", value64) :
                new ObjectParameter("value64", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertPromotedProperties", instanceIdParameter, promotionNameParameter, value33Parameter, value34Parameter, value35Parameter, value36Parameter, value37Parameter, value38Parameter, value39Parameter, value40Parameter, value41Parameter, value42Parameter, value43Parameter, value44Parameter, value45Parameter, value46Parameter, value47Parameter, value48Parameter, value49Parameter, value50Parameter, value51Parameter, value52Parameter, value53Parameter, value54Parameter, value55Parameter, value56Parameter, value57Parameter, value58Parameter, value59Parameter, value60Parameter, value61Parameter, value62Parameter, value63Parameter, value64Parameter);
        }
    
        public virtual int InsertRunnableInstanceEntry(Nullable<long> surrogateInstanceId, Nullable<System.Guid> workflowHostType, Nullable<long> serviceDeploymentId, Nullable<bool> isSuspended, Nullable<bool> isReadyToRun, Nullable<System.DateTime> pendingTimer, Nullable<long> surrogateIdentityId)
        {
            var surrogateInstanceIdParameter = surrogateInstanceId.HasValue ?
                new ObjectParameter("surrogateInstanceId", surrogateInstanceId) :
                new ObjectParameter("surrogateInstanceId", typeof(long));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var serviceDeploymentIdParameter = serviceDeploymentId.HasValue ?
                new ObjectParameter("serviceDeploymentId", serviceDeploymentId) :
                new ObjectParameter("serviceDeploymentId", typeof(long));
    
            var isSuspendedParameter = isSuspended.HasValue ?
                new ObjectParameter("isSuspended", isSuspended) :
                new ObjectParameter("isSuspended", typeof(bool));
    
            var isReadyToRunParameter = isReadyToRun.HasValue ?
                new ObjectParameter("isReadyToRun", isReadyToRun) :
                new ObjectParameter("isReadyToRun", typeof(bool));
    
            var pendingTimerParameter = pendingTimer.HasValue ?
                new ObjectParameter("pendingTimer", pendingTimer) :
                new ObjectParameter("pendingTimer", typeof(System.DateTime));
    
            var surrogateIdentityIdParameter = surrogateIdentityId.HasValue ?
                new ObjectParameter("surrogateIdentityId", surrogateIdentityId) :
                new ObjectParameter("surrogateIdentityId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertRunnableInstanceEntry", surrogateInstanceIdParameter, workflowHostTypeParameter, serviceDeploymentIdParameter, isSuspendedParameter, isReadyToRunParameter, pendingTimerParameter, surrogateIdentityIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LoadInstance(Nullable<long> surrogateLockOwnerId, Nullable<byte> operationType, Nullable<long> handleInstanceVersion, Nullable<bool> handleIsBoundToLock, Nullable<System.Guid> keyToLoadBy, Nullable<System.Guid> instanceId, string keysToAssociate, Nullable<byte> encodingOption, byte[] concatenatedKeyProperties, Nullable<System.Guid> singleKeyId, Nullable<int> operationTimeout)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var operationTypeParameter = operationType.HasValue ?
                new ObjectParameter("operationType", operationType) :
                new ObjectParameter("operationType", typeof(byte));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            var handleIsBoundToLockParameter = handleIsBoundToLock.HasValue ?
                new ObjectParameter("handleIsBoundToLock", handleIsBoundToLock) :
                new ObjectParameter("handleIsBoundToLock", typeof(bool));
    
            var keyToLoadByParameter = keyToLoadBy.HasValue ?
                new ObjectParameter("keyToLoadBy", keyToLoadBy) :
                new ObjectParameter("keyToLoadBy", typeof(System.Guid));
    
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var keysToAssociateParameter = keysToAssociate != null ?
                new ObjectParameter("keysToAssociate", keysToAssociate) :
                new ObjectParameter("keysToAssociate", typeof(string));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var concatenatedKeyPropertiesParameter = concatenatedKeyProperties != null ?
                new ObjectParameter("concatenatedKeyProperties", concatenatedKeyProperties) :
                new ObjectParameter("concatenatedKeyProperties", typeof(byte[]));
    
            var singleKeyIdParameter = singleKeyId.HasValue ?
                new ObjectParameter("singleKeyId", singleKeyId) :
                new ObjectParameter("singleKeyId", typeof(System.Guid));
    
            var operationTimeoutParameter = operationTimeout.HasValue ?
                new ObjectParameter("operationTimeout", operationTimeout) :
                new ObjectParameter("operationTimeout", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LoadInstance", surrogateLockOwnerIdParameter, operationTypeParameter, handleInstanceVersionParameter, handleIsBoundToLockParameter, keyToLoadByParameter, instanceIdParameter, keysToAssociateParameter, encodingOptionParameter, concatenatedKeyPropertiesParameter, singleKeyIdParameter, operationTimeoutParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LockInstance(Nullable<System.Guid> instanceId, Nullable<long> surrogateLockOwnerId, Nullable<long> handleInstanceVersion, Nullable<bool> handleIsBoundToLock, ObjectParameter surrogateInstanceId, ObjectParameter lockVersion, ObjectParameter result)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            var handleIsBoundToLockParameter = handleIsBoundToLock.HasValue ?
                new ObjectParameter("handleIsBoundToLock", handleIsBoundToLock) :
                new ObjectParameter("handleIsBoundToLock", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LockInstance", instanceIdParameter, surrogateLockOwnerIdParameter, handleInstanceVersionParameter, handleIsBoundToLockParameter, surrogateInstanceId, lockVersion, result);
        }
    
        public virtual int RecoverInstanceLocks()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecoverInstanceLocks");
        }
    
        public virtual ObjectResult<Nullable<int>> SaveInstance(Nullable<System.Guid> instanceId, Nullable<long> surrogateLockOwnerId, Nullable<long> handleInstanceVersion, Nullable<bool> handleIsBoundToLock, byte[] primitiveDataProperties, byte[] complexDataProperties, byte[] writeOnlyPrimitiveDataProperties, byte[] writeOnlyComplexDataProperties, byte[] metadataProperties, Nullable<bool> metadataIsConsistent, Nullable<byte> encodingOption, Nullable<long> timerDurationMilliseconds, Nullable<byte> suspensionStateChange, string suspensionReason, string suspensionExceptionName, string keysToAssociate, string keysToComplete, string keysToFree, byte[] concatenatedKeyProperties, Nullable<bool> unlockInstance, Nullable<bool> isReadyToRun, Nullable<bool> isCompleted, Nullable<System.Guid> singleKeyId, string lastMachineRunOn, string executionStatus, string blockingBookmarks, Nullable<System.Guid> workflowHostType, Nullable<long> serviceDeploymentId, Nullable<int> operationTimeout, string identityMetadata)
        {
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            var handleIsBoundToLockParameter = handleIsBoundToLock.HasValue ?
                new ObjectParameter("handleIsBoundToLock", handleIsBoundToLock) :
                new ObjectParameter("handleIsBoundToLock", typeof(bool));
    
            var primitiveDataPropertiesParameter = primitiveDataProperties != null ?
                new ObjectParameter("primitiveDataProperties", primitiveDataProperties) :
                new ObjectParameter("primitiveDataProperties", typeof(byte[]));
    
            var complexDataPropertiesParameter = complexDataProperties != null ?
                new ObjectParameter("complexDataProperties", complexDataProperties) :
                new ObjectParameter("complexDataProperties", typeof(byte[]));
    
            var writeOnlyPrimitiveDataPropertiesParameter = writeOnlyPrimitiveDataProperties != null ?
                new ObjectParameter("writeOnlyPrimitiveDataProperties", writeOnlyPrimitiveDataProperties) :
                new ObjectParameter("writeOnlyPrimitiveDataProperties", typeof(byte[]));
    
            var writeOnlyComplexDataPropertiesParameter = writeOnlyComplexDataProperties != null ?
                new ObjectParameter("writeOnlyComplexDataProperties", writeOnlyComplexDataProperties) :
                new ObjectParameter("writeOnlyComplexDataProperties", typeof(byte[]));
    
            var metadataPropertiesParameter = metadataProperties != null ?
                new ObjectParameter("metadataProperties", metadataProperties) :
                new ObjectParameter("metadataProperties", typeof(byte[]));
    
            var metadataIsConsistentParameter = metadataIsConsistent.HasValue ?
                new ObjectParameter("metadataIsConsistent", metadataIsConsistent) :
                new ObjectParameter("metadataIsConsistent", typeof(bool));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var timerDurationMillisecondsParameter = timerDurationMilliseconds.HasValue ?
                new ObjectParameter("timerDurationMilliseconds", timerDurationMilliseconds) :
                new ObjectParameter("timerDurationMilliseconds", typeof(long));
    
            var suspensionStateChangeParameter = suspensionStateChange.HasValue ?
                new ObjectParameter("suspensionStateChange", suspensionStateChange) :
                new ObjectParameter("suspensionStateChange", typeof(byte));
    
            var suspensionReasonParameter = suspensionReason != null ?
                new ObjectParameter("suspensionReason", suspensionReason) :
                new ObjectParameter("suspensionReason", typeof(string));
    
            var suspensionExceptionNameParameter = suspensionExceptionName != null ?
                new ObjectParameter("suspensionExceptionName", suspensionExceptionName) :
                new ObjectParameter("suspensionExceptionName", typeof(string));
    
            var keysToAssociateParameter = keysToAssociate != null ?
                new ObjectParameter("keysToAssociate", keysToAssociate) :
                new ObjectParameter("keysToAssociate", typeof(string));
    
            var keysToCompleteParameter = keysToComplete != null ?
                new ObjectParameter("keysToComplete", keysToComplete) :
                new ObjectParameter("keysToComplete", typeof(string));
    
            var keysToFreeParameter = keysToFree != null ?
                new ObjectParameter("keysToFree", keysToFree) :
                new ObjectParameter("keysToFree", typeof(string));
    
            var concatenatedKeyPropertiesParameter = concatenatedKeyProperties != null ?
                new ObjectParameter("concatenatedKeyProperties", concatenatedKeyProperties) :
                new ObjectParameter("concatenatedKeyProperties", typeof(byte[]));
    
            var unlockInstanceParameter = unlockInstance.HasValue ?
                new ObjectParameter("unlockInstance", unlockInstance) :
                new ObjectParameter("unlockInstance", typeof(bool));
    
            var isReadyToRunParameter = isReadyToRun.HasValue ?
                new ObjectParameter("isReadyToRun", isReadyToRun) :
                new ObjectParameter("isReadyToRun", typeof(bool));
    
            var isCompletedParameter = isCompleted.HasValue ?
                new ObjectParameter("isCompleted", isCompleted) :
                new ObjectParameter("isCompleted", typeof(bool));
    
            var singleKeyIdParameter = singleKeyId.HasValue ?
                new ObjectParameter("singleKeyId", singleKeyId) :
                new ObjectParameter("singleKeyId", typeof(System.Guid));
    
            var lastMachineRunOnParameter = lastMachineRunOn != null ?
                new ObjectParameter("lastMachineRunOn", lastMachineRunOn) :
                new ObjectParameter("lastMachineRunOn", typeof(string));
    
            var executionStatusParameter = executionStatus != null ?
                new ObjectParameter("executionStatus", executionStatus) :
                new ObjectParameter("executionStatus", typeof(string));
    
            var blockingBookmarksParameter = blockingBookmarks != null ?
                new ObjectParameter("blockingBookmarks", blockingBookmarks) :
                new ObjectParameter("blockingBookmarks", typeof(string));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var serviceDeploymentIdParameter = serviceDeploymentId.HasValue ?
                new ObjectParameter("serviceDeploymentId", serviceDeploymentId) :
                new ObjectParameter("serviceDeploymentId", typeof(long));
    
            var operationTimeoutParameter = operationTimeout.HasValue ?
                new ObjectParameter("operationTimeout", operationTimeout) :
                new ObjectParameter("operationTimeout", typeof(int));
    
            var identityMetadataParameter = identityMetadata != null ?
                new ObjectParameter("identityMetadata", identityMetadata) :
                new ObjectParameter("identityMetadata", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SaveInstance", instanceIdParameter, surrogateLockOwnerIdParameter, handleInstanceVersionParameter, handleIsBoundToLockParameter, primitiveDataPropertiesParameter, complexDataPropertiesParameter, writeOnlyPrimitiveDataPropertiesParameter, writeOnlyComplexDataPropertiesParameter, metadataPropertiesParameter, metadataIsConsistentParameter, encodingOptionParameter, timerDurationMillisecondsParameter, suspensionStateChangeParameter, suspensionReasonParameter, suspensionExceptionNameParameter, keysToAssociateParameter, keysToCompleteParameter, keysToFreeParameter, concatenatedKeyPropertiesParameter, unlockInstanceParameter, isReadyToRunParameter, isCompletedParameter, singleKeyIdParameter, lastMachineRunOnParameter, executionStatusParameter, blockingBookmarksParameter, workflowHostTypeParameter, serviceDeploymentIdParameter, operationTimeoutParameter, identityMetadataParameter);
        }
    
        public virtual ObjectResult<TryLoadRunnableInstance_Result> TryLoadRunnableInstance(Nullable<long> surrogateLockOwnerId, Nullable<System.Guid> workflowHostType, Nullable<byte> operationType, Nullable<long> handleInstanceVersion, Nullable<bool> handleIsBoundToLock, Nullable<byte> encodingOption, Nullable<int> operationTimeout)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var workflowHostTypeParameter = workflowHostType.HasValue ?
                new ObjectParameter("workflowHostType", workflowHostType) :
                new ObjectParameter("workflowHostType", typeof(System.Guid));
    
            var operationTypeParameter = operationType.HasValue ?
                new ObjectParameter("operationType", operationType) :
                new ObjectParameter("operationType", typeof(byte));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            var handleIsBoundToLockParameter = handleIsBoundToLock.HasValue ?
                new ObjectParameter("handleIsBoundToLock", handleIsBoundToLock) :
                new ObjectParameter("handleIsBoundToLock", typeof(bool));
    
            var encodingOptionParameter = encodingOption.HasValue ?
                new ObjectParameter("encodingOption", encodingOption) :
                new ObjectParameter("encodingOption", typeof(byte));
    
            var operationTimeoutParameter = operationTimeout.HasValue ?
                new ObjectParameter("operationTimeout", operationTimeout) :
                new ObjectParameter("operationTimeout", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TryLoadRunnableInstance_Result>("TryLoadRunnableInstance", surrogateLockOwnerIdParameter, workflowHostTypeParameter, operationTypeParameter, handleInstanceVersionParameter, handleIsBoundToLockParameter, encodingOptionParameter, operationTimeoutParameter);
        }
    
        public virtual int UnlockInstance(Nullable<long> surrogateLockOwnerId, Nullable<System.Guid> instanceId, Nullable<long> handleInstanceVersion)
        {
            var surrogateLockOwnerIdParameter = surrogateLockOwnerId.HasValue ?
                new ObjectParameter("surrogateLockOwnerId", surrogateLockOwnerId) :
                new ObjectParameter("surrogateLockOwnerId", typeof(long));
    
            var instanceIdParameter = instanceId.HasValue ?
                new ObjectParameter("instanceId", instanceId) :
                new ObjectParameter("instanceId", typeof(System.Guid));
    
            var handleInstanceVersionParameter = handleInstanceVersion.HasValue ?
                new ObjectParameter("handleInstanceVersion", handleInstanceVersion) :
                new ObjectParameter("handleInstanceVersion", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnlockInstance", surrogateLockOwnerIdParameter, instanceIdParameter, handleInstanceVersionParameter);
        }
    
        public virtual ObjectResult<string> getNewProjectID(ObjectParameter newProjectID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("getNewProjectID", newProjectID);
        }
    
        public virtual int getNewProjectID1(ObjectParameter newProjectID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getNewProjectID1", newProjectID);
        }
    
        public virtual int getNewProjectID2(ObjectParameter newProjectID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getNewProjectID2", newProjectID);
        }
    
        public virtual ObjectResult<Nullable<int>> getNewProjectID3(ObjectParameter newProjectID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("getNewProjectID3", newProjectID);
        }
    }
}
